
apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'jacoco'

repositories {
    mavenCentral()
}

sourceCompatibility = 1.8
targetCompatibility = 1.8


version = '1.0'

dependencies {
    
    implementation 'com.google.guava:guava:28.2-jre'
    
    implementation 'org.apache.commons:commons-lang3:3.9'
    
    implementation 'com.github.spotbugs:spotbugs:4.0.0'
    
    testCompile 'org.hamcrest:hamcrest-all:1.3'
    
    testCompile 'org.mockito:mockito-junit-jupiter:3.3.0'
    testCompile 'org.mockito:mockito-core:3.3.0'
    
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.5.2'
    testImplementation 'org.junit.jupiter:junit-jupiter-params:5.5.2'
    
    testImplementation 'org.junit.platform:junit-platform-launcher:1.6.0'
    testImplementation 'org.junit.platform:junit-platform-runner:1.6.0'
    
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.5.2'
    
}

javadoc {
  classpath += sourceSets.test.compileClasspath
  source += sourceSets.test.allJava
}


tasks.withType(Javadoc) {
  options.addStringOption('Xdoclint:none', '-quiet')
  options.addStringOption('encoding', 'UTF-8')
  options.addStringOption('charSet', 'UTF-8')
}

test {
    useJUnitPlatform()
    
    testLogging {
		events "passed", "skipped", "failed"
	}
}

jacoco {
    toolVersion = "0.8.5"
    reportsDir = file("$buildDir/customJacocoReportDir")
}

jacocoTestReport {
    reports {
        xml.enabled false
        csv.enabled false
        html.destination file("${buildDir}/jacocoHtml")
    }
}

test.finalizedBy jacocoTestReport

